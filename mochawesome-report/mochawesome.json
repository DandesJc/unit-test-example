{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-10T16:39:19.772Z",
    "end": "2025-05-10T16:39:19.782Z",
    "duration": 10,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dc38c068-814d-4d74-95d6-a81100ddce09",
      "title": "",
      "fullFile": "/workspaces/unit-test-example/test/env_test.js",
      "file": "/test/env_test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90f4de78-ac79-4444-b217-b842f0594ea9",
          "title": "Pruebas de funciones ambientales",
          "fullFile": "/workspaces/unit-test-example/test/env_test.js",
          "file": "/test/env_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tiMonth debería retornar un valor cercano esperado (assert.ok)",
              "fullTitle": "Pruebas de funciones ambientales tiMonth debería retornar un valor cercano esperado (assert.ok)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = tiMonth(1.4);\nassert.ok(Math.abs(result - 0.00115924683853086) < 1e-10);",
              "err": {},
              "uuid": "b21cdb4f-5c2c-46aa-9ee1-c6d3480e85e5",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fuelEnergySelector retorna los datos correctos para Diesel (assert.deepStrictEqual)",
              "fullTitle": "Pruebas de funciones ambientales fuelEnergySelector retorna los datos correctos para Diesel (assert.deepStrictEqual)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepStrictEqual(fuelEnergySelector(\"Diesel\"), {\n    fuel_price: 333,\n    fuel_energy: 222,\n    emision_factor: 111\n});",
              "err": {},
              "uuid": "e8be9b76-eb94-44e2-a288-1f8d4ff28192",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "electricalConsumption devuelve un número esperado (assert.strictEqual)",
              "fullTitle": "Pruebas de funciones ambientales electricalConsumption devuelve un número esperado (assert.strictEqual)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = electricalConsumption(90, 200);\nassert.strictEqual(result, 90 / (200 * 0.9));",
              "err": {},
              "uuid": "ca76ea71-0069-41e9-b39c-42682fdccf75",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fuelEfficiency devuelve un valor mayor a 100 (assert.ok)",
              "fullTitle": "Pruebas de funciones ambientales fuelEfficiency devuelve un valor mayor a 100 (assert.ok)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fuel_cons = 0.007;\nconst result = fuelEfficiency(fuel_cons);\nassert.ok(result > 100);",
              "err": {},
              "uuid": "4a734974-742b-4432-9f7e-5b6d6b1285c2",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bienvenida devuelve una cadena personalizada (assert.match)",
              "fullTitle": "Pruebas de funciones ambientales bienvenida devuelve una cadena personalizada (assert.match)",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const saludo = bienvenida(\"Jhoa\");\nassert.match(saludo, /Hola Jhoan/);",
              "err": {
                "message": "AssertionError: The input did not match the regular expression /Hola Jhoan/. Input:\n\n'Hol Jhoa, bienvenido acá'\n",
                "estack": "AssertionError [ERR_ASSERTION]: The input did not match the regular expression /Hola Jhoan/. Input:\n\n'Hol Jhoa, bienvenido acá'\n\n    at Context.<anonymous> (test/env_test.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "ee268a4c-1015-4fbd-8cb6-e0eb6ba848a5",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "costElectricalKM y fuelCostKm no deben dar el mismo valor (assert.notStrictEqual)",
              "fullTitle": "Pruebas de funciones ambientales costElectricalKM y fuelCostKm no deben dar el mismo valor (assert.notStrictEqual)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const elecCost = costElectricalKM(0.45, 238.25);\nconst fuelCost = fuelCostKm(16700, 0.0075);\nassert.notStrictEqual(elecCost, fuelCost);",
              "err": {},
              "uuid": "6beb5da2-abe0-45f3-a33d-fd9b4cc90e84",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "emisionKm retorna un número (assert.strictEqual typeof)",
              "fullTitle": "Pruebas de funciones ambientales emisionKm retorna un número (assert.strictEqual typeof)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const energiaKm = energyKm(1.6);\nconst emision = emisionKm(111, energiaKm);\nassert.strictEqual(typeof emision, \"number\");",
              "err": {},
              "uuid": "0cc034c5-99bf-4dd7-a19d-45aa23fc0297",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fuelEnergySelector retorna error con valor no válido (assert.deepStrictEqual)",
              "fullTitle": "Pruebas de funciones ambientales fuelEnergySelector retorna error con valor no válido (assert.deepStrictEqual)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = fuelEnergySelector(\"invalid\");\nassert.deepStrictEqual(result, {\n    error: \"Tipo de combustible no válido\",\n    error_code: 500\n});",
              "err": {},
              "uuid": "1c881153-4f79-41e6-8ea9-e6be3bcd30c6",
              "parentUUID": "90f4de78-ac79-4444-b217-b842f0594ea9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b21cdb4f-5c2c-46aa-9ee1-c6d3480e85e5",
            "e8be9b76-eb94-44e2-a288-1f8d4ff28192",
            "ca76ea71-0069-41e9-b39c-42682fdccf75",
            "4a734974-742b-4432-9f7e-5b6d6b1285c2",
            "6beb5da2-abe0-45f3-a33d-fd9b4cc90e84",
            "0cc034c5-99bf-4dd7-a19d-45aa23fc0297",
            "1c881153-4f79-41e6-8ea9-e6be3bcd30c6"
          ],
          "failures": [
            "ee268a4c-1015-4fbd-8cb6-e0eb6ba848a5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}